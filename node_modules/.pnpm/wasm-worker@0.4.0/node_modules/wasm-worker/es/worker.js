'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = worker;
function worker(e) {
  var _e$data = e.data,
      id = _e$data.id,
      action = _e$data.action,
      payload = _e$data.payload;


  var sendMessage = function sendMessage(result, data) {
    self.postMessage({
      id: id,
      action: action,
      result: result,
      payload: data
    });
  };

  var onError = function onError(ex) {
    return sendMessage(1, '' + ex);
  };
  var onSuccess = sendMessage.bind(null, 0);

  if (action === ACTIONS.COMPILE_MODULE) {
    Promise.resolve().then(function () {
      var res = void 0;
      if (getImportObject !== undefined) {
        importObject = getImportObject();
      }

      if (typeof payload === 'string') {
        res = fetch(payload);
        if (WebAssembly.instantiateStreaming !== undefined) {
          return WebAssembly.instantiateStreaming(res, importObject);
        }
        res = res.then(function (response) {
          return response.arrayBuffer();
        });
      } else {
        res = Promise.resolve(payload);
      }

      return res.then(function (buff) {
        return WebAssembly.compile(buff);
      }).then(function (module) {
        return WebAssembly.instantiate(module, importObject).then(function (instance) {
          return { module: module, instance: instance };
        });
      });
    }).then(function (_ref) {
      var module = _ref.module,
          instance = _ref.instance;

      moduleInstance = instance;

      wasmModule = module;
      onSuccess({
        exports: WebAssembly.Module.exports(module).filter(function (exp) {
          return exp.kind === 'function';
        }).map(function (exp) {
          return exp.name;
        })
      });
    })['catch'](onError);
  } else if (action === ACTIONS.CALL_FUNCTION_EXPORT) {
    var func = payload.func,
        params = payload.params;


    Promise.resolve().then(function () {
      var ctx = moduleInstance.exports;

      onSuccess(ctx[func].apply(ctx, params));
    })['catch'](onError);
  } else if (action === ACTIONS.RUN_FUNCTION) {
    var _func = payload.func,
        _params = payload.params;


    Promise.resolve().then(function () {
      var fun = new Function('return ' + _func)();
      onSuccess(fun({
        module: wasmModule,
        instance: moduleInstance,
        importObject: importObject,
        params: _params
      }));
    })['catch'](onError);
  }
}