'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = wasmWorker;

var _actions = require('./actions');

var _actions2 = _interopRequireDefault(_actions);

var _worker = require('./worker');

var _worker2 = _interopRequireDefault(_worker);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var getTransferableParams = function getTransferableParams() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return params.filter(function (x) {
    return x instanceof ArrayBuffer || x instanceof MessagePort || x instanceof ImageBitmap;
  });
};

function wasmWorker(source) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var currentId = 0;
  var promises = {};

  var getImportObject = options.getImportObject,
      otherOptions = _objectWithoutProperties(options, ['getImportObject']);

  var worker = new Worker('data:,ACTIONS=' + JSON.stringify(_actions2['default']) + ';getImportObject=' + getImportObject + ';' + ('importObject=undefined;wasmModule=null;moduleInstance=null;onmessage=' + _worker2['default']), otherOptions);

  worker.onmessage = function (e) {
    var _e$data = e.data,
        id = _e$data.id,
        result = _e$data.result,
        action = _e$data.action,
        payload = _e$data.payload;


    if (action === _actions2['default'].COMPILE_MODULE) {
      if (result === 0) {
        var exports = payload.exports;


        promises[id][0]({
          exports: exports.reduce(function (acc, exp) {
            return _extends({}, acc, _defineProperty({}, exp, function () {
              for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
                params[_key] = arguments[_key];
              }

              return new Promise(function () {
                for (var _len2 = arguments.length, rest = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  rest[_key2] = arguments[_key2];
                }

                promises[++currentId] = rest;
                worker.postMessage({
                  id: currentId,
                  action: _actions2['default'].CALL_FUNCTION_EXPORT,
                  payload: {
                    func: exp,
                    params: params
                  }
                }, getTransferableParams(params));
              });
            }));
          }, {}),
          run: function run(func, params) {
            return new Promise(function () {
              for (var _len3 = arguments.length, rest = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                rest[_key3] = arguments[_key3];
              }

              promises[++currentId] = rest;
              worker.postMessage({
                id: currentId,
                action: _actions2['default'].RUN_FUNCTION,
                payload: {
                  func: func.toString(),
                  params: params
                }
              }, getTransferableParams(params));
            });
          }
        });
      } else if (result === 1) {
        promises[id][1](payload);
      }
    } else if (action === _actions2['default'].CALL_FUNCTION_EXPORT || action === _actions2['default'].RUN_FUNCTION) {
      promises[id][result](payload);
    }

    promises[id] = null;
  };

  return new Promise(function () {
    for (var _len4 = arguments.length, params = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      params[_key4] = arguments[_key4];
    }

    promises[++currentId] = [].concat(params);

    worker.postMessage({
      id: currentId,
      action: _actions2['default'].COMPILE_MODULE,
      payload: (0, _utils.getWasmSource)(source)
    });
  });
}