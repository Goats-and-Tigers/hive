import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/.pnpm/wasm-worker@0.4.0/node_modules/wasm-worker/es/actions.js
var require_actions = __commonJS({
  "node_modules/.pnpm/wasm-worker@0.4.0/node_modules/wasm-worker/es/actions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var ACTIONS2 = {
      COMPILE_MODULE: 0,
      CALL_FUNCTION_EXPORT: 1,
      RUN_FUNCTION: 2
    };
    exports["default"] = ACTIONS2;
  }
});

// node_modules/.pnpm/wasm-worker@0.4.0/node_modules/wasm-worker/es/worker.js
var require_worker = __commonJS({
  "node_modules/.pnpm/wasm-worker@0.4.0/node_modules/wasm-worker/es/worker.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = worker;
    function worker(e) {
      var _e$data = e.data, id = _e$data.id, action = _e$data.action, payload = _e$data.payload;
      var sendMessage = function sendMessage2(result, data) {
        self.postMessage({
          id,
          action,
          result,
          payload: data
        });
      };
      var onError = function onError2(ex) {
        return sendMessage(1, "" + ex);
      };
      var onSuccess = sendMessage.bind(null, 0);
      if (action === ACTIONS.COMPILE_MODULE) {
        Promise.resolve().then(function() {
          var res = void 0;
          if (getImportObject !== void 0) {
            importObject = getImportObject();
          }
          if (typeof payload === "string") {
            res = fetch(payload);
            if (WebAssembly.instantiateStreaming !== void 0) {
              return WebAssembly.instantiateStreaming(res, importObject);
            }
            res = res.then(function(response) {
              return response.arrayBuffer();
            });
          } else {
            res = Promise.resolve(payload);
          }
          return res.then(function(buff) {
            return WebAssembly.compile(buff);
          }).then(function(module2) {
            return WebAssembly.instantiate(module2, importObject).then(function(instance) {
              return { module: module2, instance };
            });
          });
        }).then(function(_ref) {
          var module2 = _ref.module, instance = _ref.instance;
          moduleInstance = instance;
          wasmModule = module2;
          onSuccess({
            exports: WebAssembly.Module.exports(module2).filter(function(exp) {
              return exp.kind === "function";
            }).map(function(exp) {
              return exp.name;
            })
          });
        })["catch"](onError);
      } else if (action === ACTIONS.CALL_FUNCTION_EXPORT) {
        var func = payload.func, params = payload.params;
        Promise.resolve().then(function() {
          var ctx = moduleInstance.exports;
          onSuccess(ctx[func].apply(ctx, params));
        })["catch"](onError);
      } else if (action === ACTIONS.RUN_FUNCTION) {
        var _func = payload.func, _params = payload.params;
        Promise.resolve().then(function() {
          var fun = new Function("return " + _func)();
          onSuccess(fun({
            module: wasmModule,
            instance: moduleInstance,
            importObject,
            params: _params
          }));
        })["catch"](onError);
      }
    }
  }
});

// node_modules/.pnpm/wasm-worker@0.4.0/node_modules/wasm-worker/es/utils.js
var require_utils = __commonJS({
  "node_modules/.pnpm/wasm-worker@0.4.0/node_modules/wasm-worker/es/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var getWasmSource = exports.getWasmSource = function getWasmSource2(source) {
      var result = source;
      if (typeof result === "string" && typeof location !== "undefined") {
        result = result.trim();
        if (result.indexOf("/") === 0) {
          result = location.origin + result;
        } else if (result.indexOf("http") !== 0) {
          result = location.href + (location.href[location.href.length - 1] === "/" ? "" : "/") + result;
        }
      }
      return result;
    };
  }
});

// node_modules/.pnpm/wasm-worker@0.4.0/node_modules/wasm-worker/es/index.js
var require_es = __commonJS({
  "node_modules/.pnpm/wasm-worker@0.4.0/node_modules/wasm-worker/es/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    exports["default"] = wasmWorker;
    var _actions = require_actions();
    var _actions2 = _interopRequireDefault(_actions);
    var _worker = require_worker();
    var _worker2 = _interopRequireDefault(_worker);
    var _utils = require_utils();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0)
          continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i))
          continue;
        target[i] = obj[i];
      }
      return target;
    }
    var getTransferableParams = function getTransferableParams2() {
      var params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      return params.filter(function(x) {
        return x instanceof ArrayBuffer || x instanceof MessagePort || x instanceof ImageBitmap;
      });
    };
    function wasmWorker(source) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var currentId = 0;
      var promises = {};
      var getImportObject2 = options.getImportObject, otherOptions = _objectWithoutProperties(options, ["getImportObject"]);
      var worker = new Worker("data:,ACTIONS=" + JSON.stringify(_actions2["default"]) + ";getImportObject=" + getImportObject2 + ";" + ("importObject=undefined;wasmModule=null;moduleInstance=null;onmessage=" + _worker2["default"]), otherOptions);
      worker.onmessage = function(e) {
        var _e$data = e.data, id = _e$data.id, result = _e$data.result, action = _e$data.action, payload = _e$data.payload;
        if (action === _actions2["default"].COMPILE_MODULE) {
          if (result === 0) {
            var exports2 = payload.exports;
            promises[id][0]({
              exports: exports2.reduce(function(acc, exp) {
                return _extends({}, acc, _defineProperty({}, exp, function() {
                  for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
                    params[_key] = arguments[_key];
                  }
                  return new Promise(function() {
                    for (var _len2 = arguments.length, rest = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                      rest[_key2] = arguments[_key2];
                    }
                    promises[++currentId] = rest;
                    worker.postMessage({
                      id: currentId,
                      action: _actions2["default"].CALL_FUNCTION_EXPORT,
                      payload: {
                        func: exp,
                        params
                      }
                    }, getTransferableParams(params));
                  });
                }));
              }, {}),
              run: function run(func, params) {
                return new Promise(function() {
                  for (var _len3 = arguments.length, rest = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    rest[_key3] = arguments[_key3];
                  }
                  promises[++currentId] = rest;
                  worker.postMessage({
                    id: currentId,
                    action: _actions2["default"].RUN_FUNCTION,
                    payload: {
                      func: func.toString(),
                      params
                    }
                  }, getTransferableParams(params));
                });
              }
            });
          } else if (result === 1) {
            promises[id][1](payload);
          }
        } else if (action === _actions2["default"].CALL_FUNCTION_EXPORT || action === _actions2["default"].RUN_FUNCTION) {
          promises[id][result](payload);
        }
        promises[id] = null;
      };
      return new Promise(function() {
        for (var _len4 = arguments.length, params = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          params[_key4] = arguments[_key4];
        }
        promises[++currentId] = [].concat(params);
        worker.postMessage({
          id: currentId,
          action: _actions2["default"].COMPILE_MODULE,
          payload: (0, _utils.getWasmSource)(source)
        });
      });
    }
  }
});

// dep:wasm-worker
var wasm_worker_default = require_es();
export {
  wasm_worker_default as default
};
//# sourceMappingURL=wasm-worker.js.map
